using NUnit.Framework;
using System;
using System.Linq;
using LibrarySnail;

public class SnailTest
{
    [Test]
    public void SnailTestOddRowCol() // 3 3
    {
        int[][] array =
        {
           new []{1, 2, 3},
           new []{4, 5, 6},
           new []{7, 8, 9}
       };
        var r = new[] { 1, 2, 3, 6, 9, 8, 7, 4, 5 };
        Test(array, r);
    }

    [Test]
    public void SnailTestEvenRowCol() // 2 2
    {
        int[][] array =
        {
           new []{1, 2},
           new []{4, 5},
           new []{7, 8}
       };
        var r = new[] { 1, 2, 5, 8, 7, 4 };
        Test(array, r);
    }
    [Test]
    public void SnailTestOddRowEvenCol() // 5 4
    {
        int[][] array =
        {
           new []{1, 2, 3, 4},
           new []{5, 6, 7, 8},
           new []{9, 10, 11, 12},
           new []{13, 14, 15, 16},
           new []{17, 18, 19, 20}
       };
        var r = new[] { 1, 2, 3, 4, 8, 12, 16, 20, 19, 18, 17, 13, 9, 5, 6, 7, 11, 15, 14, 10 };
        Test(array, r);
    }
    [Test]
    public void SnailTestOddRowOddCol() // 5 3
    {
        int[][] array =
        {
           new []{1, 2, 3},
           new []{5, 6, 7},
           new []{9, 10, 11},
           new []{13, 14, 15},
           new []{17, 18, 19}
       };
        var r = new[] { 1, 2, 3, 7, 11, 15, 19, 18, 17, 13, 9, 5, 6, 10, 14 };
        Test(array, r);
    }
    [Test]
    public void SnailTestEvenRowOddCol() // 6 5
    {
        int[][] array =
        {
           new []{1, 2, 3, 4, 5},
           new []{6, 7, 8, 9, 10},
           new []{11, 12, 13, 14, 15},
           new []{16, 17, 18, 19, 20},
           new []{21, 22, 23, 24, 25},
           new []{26, 27, 28, 29, 30}
       };
        var r = new[] { 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 29, 28, 27, 26, 21, 16,
            11, 6, 7, 8, 9, 14, 19, 24, 23, 22, 17, 12, 13, 18};
        Test(array, r);
    }
    [Test]
    public void SnailTestEvenRowEvenCol() // 6 4
    {
        int[][] array =
        {
           new []{1, 2, 3, 4},
           new []{6, 7, 8, 9},
           new []{11, 12, 13, 14},
           new []{16, 17, 18, 19},
           new []{21, 22, 23, 24},
           new []{26, 27, 28, 29}
       };
        var r = new[] { 1, 2, 3, 4, 9, 14, 19, 24, 29, 28, 27, 26, 21, 16, 11, 6,
            7, 8, 13, 18, 23, 22, 17, 12};
        Test(array, r);
    }
    [Test]
    public void SnailTestOddRowEvenMoreCol() // 5 6
    {
        int[][] array =
        {
           new []{1, 2, 3, 4, 5, 6},
           new []{7, 8, 9, 10, 11, 12},
           new []{13, 14, 15, 16, 17, 18},
           new []{18, 19, 20, 21, 22, 23},
           new []{24, 25, 26, 27, 28, 29}
       };
        var r = new[] { 1, 2, 3, 4, 5, 6, 12, 18, 23, 29, 28, 27, 26, 25, 24, 18,
            13, 7, 8, 9, 10, 11, 17, 22, 21, 20, 19, 14, 15, 16};
        Test(array, r);
    }
    [Test]
    public void SnailTestEvenRowEvenMoreCol() // 4 6
    {
        int[][] array =
        {
           new []{1, 2, 3, 4, 5, 6},
           new []{7, 8, 9, 10, 11, 12},
           new []{13, 14, 15, 16, 17, 18},
           new []{18, 19, 20, 21, 22, 23}
       };
        var r = new[] { 1, 2, 3, 4, 5, 6, 12, 18, 23, 22, 21, 20, 19, 18, 13, 7, 8,
            9, 10, 11, 17, 16, 15, 14};
        Test(array, r);
    }
    [Test]
    public void SnailTestEvenRowOddMoreCol() // 4 5
    {
        int[][] array =
        {
           new []{1, 2, 3, 4, 5},
           new []{7, 8, 9, 10, 11},
           new []{13, 14, 15, 16, 17},
           new []{18, 19, 20, 21, 22}
       };
        var r = new[] { 1, 2, 3, 4, 5, 11, 17, 22, 21, 20, 19, 18, 13, 7, 8, 9, 10, 16, 15, 14 };
        Test(array, r);
    }
    [Test]
    public void SnailTestOddRowOddMoreCol() // 3 5
    {
        int[][] array =
        {
           new []{1, 2, 3, 4, 5},
           new []{7, 8, 9, 10, 11},
           new []{13, 14, 15, 16, 17}
       };
        var r = new[] { 1, 2, 3, 4, 5, 11, 17, 16, 15, 14, 13, 7, 8, 9, 10 };
        Test(array, r);
    }

    [Test]
    public void FnftGdg()
    {
        int[][] array =
         {
            new int[] {247,472,91,137,844,29,522,239,283,513,408,108,723,81,133,914,510,719,586,790,502,771,255,628,772,13,963,606,651,286},
            new int[] { 128, 827, 849, 563, 367, 450, 162, 880, 153, 883, 817, 280, 670, 429, 651, 182, 176, 535, 507, 684, 296, 215, 975, 899, 163, 178, 467, 690, 936, 206 },
            new int[] { 959, 627, 924, 248, 527, 310, 751, 931, 451, 367, 247, 695, 550, 879, 446, 311, 143, 747, 962, 968, 532, 499, 604, 743, 950, 525, 237, 191, 980, 790 },
            new int[] { 727, 781, 1000, 311, 888, 726, 508, 67, 995, 33, 69, 548, 356, 190, 285, 710, 232, 467, 807, 278, 943, 270, 742, 149, 404, 485, 721, 53, 259, 446 },
            new int[] { 540, 230, 284, 968, 700, 342, 474, 100, 564, 923, 575, 653, 241, 960, 936, 847, 189, 374, 929, 300, 943, 662, 880, 319, 564, 426, 105, 934, 870, 612 },
            new int[] { 822, 197, 578, 193, 953, 234, 71, 378, 200, 961, 348, 360, 214, 43, 998, 618, 604, 507, 27, 343, 252, 950, 128, 805, 739, 24, 861, 763, 698, 18 },
            new int[] { 138, 549, 235, 97, 850, 895, 57, 721, 813, 746, 54, 18, 146, 805, 496, 599, 437, 272, 432, 607, 505, 98, 529, 709, 137, 7, 646, 190, 65, 941 },
            new int[] { 322, 604, 171, 737, 712, 888, 75, 332, 362, 259, 531, 679, 737, 894, 798, 817, 63, 117, 939, 56, 289, 953, 444, 250, 744, 785, 824, 239, 799, 328 },
            new int[] { 81, 520, 553, 405, 624, 422, 372, 479, 131, 183, 400, 725, 502, 276, 76, 694, 359, 94, 979, 248, 60, 666, 452, 172, 781, 663, 854, 312, 664, 686 },
            new int[] { 611, 223, 636, 66, 631, 125, 877, 128, 597, 467, 533, 289, 898, 960, 354, 811, 539, 923, 386, 387, 63, 457, 747, 797, 937, 389, 840, 97, 883, 192 },
            new int[] { 185, 969, 412, 58, 207, 354, 233, 323, 638, 452, 393, 404, 728, 762, 839, 484, 827, 859, 820, 215, 238, 203, 638, 388, 190, 108, 353, 157, 145, 487 },
            new int[] { 11, 122, 747, 410, 272, 256, 304, 902, 157, 224, 527, 263, 572, 306, 835, 491, 36, 450, 739, 104, 956, 25, 612, 82, 975, 687, 586, 964, 14, 246 },
            new int[] { 613, 230, 47, 905, 442, 898, 912, 137, 575, 837, 166, 786, 226, 499, 844, 540, 201, 933, 466, 820, 988, 822, 346, 115, 538, 208, 142, 817, 611, 697 },
            new int[] { 191, 727, 468, 847, 370, 729, 769, 33, 549, 255, 22, 409, 620, 76, 889, 447, 108, 863, 321, 113, 553, 444, 202, 214, 871, 694, 334, 245, 613, 335 },
            new int[] { 506, 826, 941, 18, 153, 576, 581, 221, 8, 377, 101, 391, 703, 499, 256, 264, 729, 272, 663, 187, 340, 624, 453, 215, 781, 992, 183, 842, 667, 639 },
            new int[] { 464, 693, 957, 228, 300, 682, 787, 443, 528, 732, 788, 857, 488, 108, 168, 467, 794, 337, 678, 429, 323, 167, 546, 574, 925, 742, 480, 602, 597, 316 },
            new int[] { 312, 992, 282, 367, 430, 421, 826, 770, 613, 983, 504, 225, 325, 360, 952, 515, 504, 740, 751, 466, 832, 132, 143, 305, 597, 645, 708, 960, 949, 371 },
            new int[] { 318, 405, 821, 268, 923, 831, 161, 472, 901, 624, 715, 416, 505, 450, 677, 57, 666, 927, 304, 7, 388, 78, 77, 646, 929, 1000, 973, 285, 769, 372 },
            new int[] { 133, 646, 57, 323, 674, 292, 123, 660, 109, 987, 187, 66, 321, 206, 17, 65, 818, 428, 586, 471, 731, 234, 309, 301, 847, 18, 936, 837, 447, 806 },
            new int[] { 847, 630, 324, 487, 244, 758, 664, 85, 758, 964, 380, 545, 923, 98, 639, 752, 638, 38, 728, 631, 779, 29, 715, 12, 582, 309, 896, 370, 152, 614 },
            new int[] { 468, 101, 257, 772, 895, 77, 476, 824, 942, 608, 180, 355, 513, 217, 856, 628, 491, 847, 60, 634, 971, 61, 286, 793, 483, 270, 9, 158, 800, 387 },
            new int[] { 636, 261, 380, 191, 320, 432, 146, 513, 578, 992, 548, 902, 647, 772, 866, 323, 650, 173, 929, 139, 865, 118, 835, 590, 583, 666, 883, 595, 908, 107 },
            new int[] { 339, 407, 455, 17, 913, 299, 95, 530, 291, 655, 904, 442, 849, 771, 489, 180, 974, 667, 741, 152, 407, 73, 151, 999, 429, 587, 565, 791, 402, 245 },
            new int[] { 265, 799, 669, 66, 624, 869, 313, 368, 35, 103, 935, 541, 606, 267, 237, 432, 861, 941, 867, 429, 264, 450, 828, 108, 564, 195, 672, 119, 99, 585 },
            new int[] { 111, 125, 508, 609, 234, 81, 955, 4, 991, 76, 891, 609, 564, 967, 195, 832, 708, 798, 122, 834, 689, 894, 401, 688, 459, 539, 176, 979, 491, 601 },
            new int[] { 485, 93, 218, 994, 59, 764, 386, 44, 240, 471, 971, 64, 524, 556, 485, 625, 323, 92, 11, 632, 190, 392, 442, 70, 80, 352, 709, 1, 349, 419 },
            new int[] { 783, 51, 550, 747, 122, 675, 864, 187, 857, 823, 424, 233, 107, 626, 797, 608, 791, 78, 447, 830, 215, 483, 306, 524, 78, 94, 981, 720, 783, 911 },
            new int[] { 520, 879, 805, 827, 33, 579, 833, 857, 831, 81, 34, 716, 391, 796, 882, 533, 612, 452, 884, 696, 674, 708, 406, 663, 612, 578, 144, 542, 389, 884 },
            new int[] { 713, 638, 142, 566, 798, 945, 150, 984, 619, 933, 804, 11, 190, 493, 695, 526, 822, 2, 151, 158, 991, 674, 846, 894, 962, 380, 502, 935, 479, 806 },
            new int[] { 49, 974, 321, 972, 884, 930, 964, 493, 266, 401, 720, 699, 325, 505, 765, 634, 711, 812, 42, 652, 374, 705, 400, 986, 930, 427, 633, 446, 236, 818 }

         };
        
        var r = new int[] { 247, 472, 91, 137, 844, 29, 522, 239, 283, 513, 408, 108, 723, 81, 133, 914, 510, 719, 586, 790, 502, 771, 255, 628, 772, 13, 963, 606, 651, 286, 206, 790, 446, 612, 18, 941, 328, 686, 192, 487, 246, 697, 335, 639, 316, 371, 372, 806, 614, 387, 107, 245, 585, 601, 419, 911, 884, 806, 818, 236, 446, 633, 427, 930, 986, 400, 705, 374, 652, 42, 812, 711, 634, 765, 505, 325, 699, 720, 401, 266, 493, 964, 930, 884, 972, 321, 974, 49, 713, 520, 783, 485, 111, 265, 339, 636, 468, 847, 133, 318, 312, 464, 506, 191, 613, 11, 185, 611, 81, 322, 138, 822, 540, 727, 959, 128, 827, 849, 563, 367, 450, 162, 880, 153, 883, 817, 280, 670, 429, 651, 182, 176, 535, 507, 684, 296, 215, 975, 899, 163, 178, 467, 690, 936, 980, 259, 870, 698, 65, 799, 664, 883, 145, 14, 611, 613, 667, 597, 949, 769, 447, 152, 800, 908, 402, 99, 491, 349, 783, 389, 479, 935, 502, 380, 962, 894, 846, 674, 991, 158, 151, 2, 822, 526, 695, 493, 190, 11, 804, 933, 619, 984, 150, 945, 798, 566, 142, 638, 879, 51, 93, 125, 799, 407, 261, 101, 630, 646, 405, 992, 693, 826, 727, 230, 122, 969, 223, 520, 604, 549, 197, 230, 781, 627, 924, 248, 527, 310, 751, 931, 451, 367, 247, 695, 550, 879, 446, 311, 143, 747, 962, 968, 532, 499, 604, 743, 950, 525, 237, 191, 53, 934, 763, 190, 239, 312, 97, 157, 964, 817, 245, 842, 602, 960, 285, 837, 370, 158, 595, 791, 119, 979, 1, 720, 542, 144, 578, 612, 663, 406, 708, 674, 696, 884, 452, 612, 533, 882, 796, 391, 716, 34, 81, 831, 857, 833, 579, 33, 827, 805, 550, 218, 508, 669, 455, 380, 257, 324, 57, 821, 282, 957, 941, 468, 47, 747, 412, 636, 553, 171, 235, 578, 284, 1000, 311, 888, 726, 508, 67, 995, 33, 69, 548, 356, 190, 285, 710, 232, 467, 807, 278, 943, 270, 742, 149, 404, 485, 721, 105, 861, 646, 824, 854, 840, 353, 586, 142, 334, 183, 480, 708, 973, 936, 896, 9, 883, 565, 672, 176, 709, 981, 94, 78, 524, 306, 483, 215, 830, 447, 78, 791, 608, 797, 626, 107, 233, 424, 823, 857, 187, 864, 675, 122, 747, 994, 609, 66, 17, 191, 772, 487, 323, 268, 367, 228, 18, 847, 905, 410, 58, 66, 405, 737, 97, 193, 968, 700, 342, 474, 100, 564, 923, 575, 653, 241, 960, 936, 847, 189, 374, 929, 300, 943, 662, 880, 319, 564, 426, 24, 7, 785, 663, 389, 108, 687, 208, 694, 992, 742, 645, 1000, 18, 309, 270, 666, 587, 195, 539, 352, 80, 70, 442, 392, 190, 632, 11, 92, 323, 625, 485, 556, 524, 64, 971, 471, 240, 44, 386, 764, 59, 234, 624, 913, 320, 895, 244, 674, 923, 430, 300, 153, 370, 442, 272, 207, 631, 624, 712, 850, 953, 234, 71, 378, 200, 961, 348, 360, 214, 43, 998, 618, 604, 507, 27, 343, 252, 950, 128, 805, 739, 137, 744, 781, 937, 190, 975, 538, 871, 781, 925, 597, 929, 847, 582, 483, 583, 429, 564, 459, 688, 401, 894, 689, 834, 122, 798, 708, 832, 195, 967, 564, 609, 891, 76, 991, 4, 955, 81, 869, 299, 432, 77, 758, 292, 831, 421, 682, 576, 729, 898, 256, 354, 125, 422, 888, 895, 57, 721, 813, 746, 54, 18, 146, 805, 496, 599, 437, 272, 432, 607, 505, 98, 529, 709, 250, 172, 797, 388, 82, 115, 214, 215, 574, 305, 646, 301, 12, 793, 590, 999, 108, 828, 450, 264, 429, 867, 941, 861, 432, 237, 267, 606, 541, 935, 103, 35, 368, 313, 95, 146, 476, 664, 123, 161, 826, 787, 581, 769, 912, 304, 233, 877, 372, 75, 332, 362, 259, 531, 679, 737, 894, 798, 817, 63, 117, 939, 56, 289, 953, 444, 452, 747, 638, 612, 346, 202, 453, 546, 143, 77, 309, 715, 286, 835, 151, 73, 407, 152, 741, 667, 974, 180, 489, 771, 849, 442, 904, 655, 291, 530, 513, 824, 85, 660, 472, 770, 443, 221, 33, 137, 902, 323, 128, 479, 131, 183, 400, 725, 502, 276, 76, 694, 359, 94, 979, 248, 60, 666, 457, 203, 25, 822, 444, 624, 167, 132, 78, 234, 29, 61, 118, 865, 139, 929, 173, 650, 323, 866, 772, 647, 902, 548, 992, 578, 942, 758, 109, 901, 613, 528, 8, 549, 575, 157, 638, 597, 467, 533, 289, 898, 960, 354, 811, 539, 923, 386, 387, 63, 238, 956, 988, 553, 340, 323, 832, 388, 731, 779, 971, 634, 60, 847, 491, 628, 856, 217, 513, 355, 180, 608, 964, 987, 624, 983, 732, 377, 255, 837, 224, 452, 393, 404, 728, 762, 839, 484, 827, 859, 820, 215, 104, 820, 113, 187, 429, 466, 7, 471, 631, 728, 38, 638, 752, 639, 98, 923, 545, 380, 187, 715, 504, 788, 101, 22, 166, 527, 263, 572, 306, 835, 491, 36, 450, 739, 466, 321, 663, 678, 751, 304, 586, 428, 818, 65, 17, 206, 321, 66, 416, 225, 857, 391, 409, 786, 226, 499, 844, 540, 201, 933, 863, 272, 337, 740, 927, 666, 57, 677, 450, 505, 325, 488, 703, 620, 76, 889, 447, 108, 729, 794, 504, 515, 952, 360, 108, 499, 256, 264, 467, 168 }
;
        Test(array, r);
    }

    [Test]
    public void FnftGdg()
    {
        int[][] array =
         {
            new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
            new int[] { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 },
            new int[] { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 },
            new int[] { 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119 },
            new int[] { 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 },
            new int[] { 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179 },
            new int[] { 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209 },
            new int[] { 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239 },
            new int[] { 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269 },
            new int[] { 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299 },
            new int[] { 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329 },
            new int[] { 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359 },
            new int[] { 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389 },
            new int[] { 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419 },
            new int[] { 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449 },
            new int[] { 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479 },
            new int[] { 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509 },
            new int[] { 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539 },
            new int[] { 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569 },
            new int[] { 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599 },
            new int[] { 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629 },
            new int[] { 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659 },
            new int[] { 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689 },
            new int[] { 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719 },
            new int[] { 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749 },
            new int[] { 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779 },
            new int[] { 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809 },
            new int[] { 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839 },
            new int[] { 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869 },
            new int[] { 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899 }
        };


    public string Int2dToString(int[][] a)
    {
        return $"[{string.Join("\n", a.Select(row => $"[{string.Join(",", row)}]"))}]";
    }

    public void Test(int[][] array, int[] result)
    {
        var text = $"{Int2dToString(array)}\nshould be sorted to\n[{string.Join(",", result)}]\n";
        Console.WriteLine(text);
        Assert.AreEqual(result, SnailSolution.Snail(array));
    }
}